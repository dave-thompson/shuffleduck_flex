<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="resetTitleLabelLength()" backgroundColor="#172322" height="132" paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8" mouseOver="mouseOverListing(event)" mouseOut="mouseOutListing(event)" click="mouseClickListing(event)" width="100%" borderStyle="solid" borderThickness="2" cornerRadius="10" borderColor="#172322">
   	<mx:states>
   	   	<mx:State name="listing_highlight">
   	   	   	<mx:SetStyle name="borderColor"/>
   	   	   	<mx:SetStyle name="backgroundColor" value="#2C403E"/>
   	   	</mx:State>
   	   	<mx:State name="title_highlight">
   	   	   	<mx:SetStyle target="{titleLabel}" name="color" value="0x25e9eb"/>
   	   	   	<mx:SetStyle target="{titleHBox}" name="cornerRadius"/>
   	   	   	<mx:SetStyle target="{titleHBox}" name="borderThickness"/>
   	   	   	<mx:SetStyle target="{titleHBox}" name="borderStyle"/>
   	   	   	<mx:SetStyle target="{titleHBox}" name="borderColor"/>
   	   	</mx:State>
   	</mx:states>
	<mx:HBox width="182" height="112" backgroundColor="#FFFFFF" id="sidePreviewHBox"/>
	<mx:VBox height="100%" verticalGap="0" width="100%">
		<mx:HBox width="100%">
			<mx:VBox height="100%" width="100%" verticalGap="0">
				<mx:HBox width="100%" height="42" verticalScrollPolicy="off" horizontalScrollPolicy="off" autoLayout="false" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
					<mx:HBox id = "titleHBox" click="clickTitle(event)" width="100%" height="42" verticalScrollPolicy="off" horizontalScrollPolicy="off">
						<mx:Label id = "titleLabel" color="#FFFFFF" fontSize="30" width="100%" mouseOver="mouseOverTitle(event)" mouseOut="mouseOutTitle(event)" toolTip="Rename this deck" updateComplete="resetTitleLabelLength()"/>
					</mx:HBox>
				</mx:HBox>
				<mx:Label text="ID: {_userVisibleID}" color="#FFFFFF"/>
				<mx:Label text="{_numCardsString}" color="#FFFFFF" fontStyle="italic"/>
			</mx:VBox>
			<mx:VBox height="100%" horizontalGap="0" verticalGap="0">
			    <mx:Button label="Duplicate" id="duplicateButton" styleName="StandardButton" textRollOverColor="0x25e9eb" alpha="0.0" click="duplicateButtonClicked()" toolTip="Make a copy of this deck"/>
				<mx:HBox width="100%" paddingRight="0" paddingLeft="0" horizontalGap="0">
					<mx:Spacer width="100%"/>
					<mx:Button label="Delete" id="deleteButton" styleName="StandardButton" textRollOverColor="0x25e9eb" alpha="0.0" click="deleteButtonClicked()" toolTip="Delete this deck"/>
				</mx:HBox>
		</mx:VBox>
		</mx:HBox>
		<mx:VBox verticalGap="0" height="100%" width="100%">
			<mx:Spacer height = "100%"/>
			<mx:HBox width="100%">
				<mx:Spacer width = "100%"/>
				<mx:Label color="#FFFFFF" id="lastSavedDateLabel"/>		
			</mx:HBox>
		</mx:VBox>

	</mx:VBox>

	<mx:HTTPService id="decksUpdate" url="{ShuffleDuck.CONTEXT_URL}/decks/{_userVisibleID}" method="POST" resultFormat="e4x" contentType="application/xml" result="completeTitleChange(event)" headers="{putHeader}"/>


<mx:Script>
	<![CDATA[
		import com.shuffleduck.data.Side;
		
		import com.adobe.utils.DateUtil;
		import com.shuffleduck.utils.CustomEvent;
		import mx.events.CloseEvent;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		import mx.rpc.events.ResultEvent;
		import ascb.util.DateUtilities;
		import mx.core.IFlexDisplayObject;
		import mx.managers.PopUpManagerChildList;
		import com.shuffleduck.view.dialogs.ConfirmDialog;
		import com.shuffleduck.view.dialogs.DeckNameDialog;
				
		// state variables
		[Bindable] private var _userVisibleID:String;
  		[Bindable] private var _lastSavedDate:Date;
  		[Bindable] private var _numCardsString:String;
  		private var _title:String;
		
		private var _stagingTitle:String;
		private var _serverTimeAheadOfLocalTimeByMilliseconds:Number;
		
		// event constants
		public static const DECK_LISTING_CLICKED:String = "DeckListing_deckListingClicked";
		public static const DECK_DELETE_REQUESTED:String = "DeckListing_deckDeleteRequested";
		public static const DECK_DUPLICATION_REQUESTED:String = "DeckListing_deckDuplicationRequested";
			
		// The header to send with the above put HTTPService
  		[Bindable] private var putHeader:Object = new Object();

		public function setup(deckXML:XML, serverTime:Date):void
		{
			// build HTTPService headers
			putHeader["X-HTTP-METHOD-OVERRIDE"] = "put";
			
			// update data model according to XML String (UI bound to data model)
			_userVisibleID = deckXML.user_visible_id;
	  		_serverTimeAheadOfLocalTimeByMilliseconds = DateUtilities.elapsedMilliseconds(serverTime, new Date());
	  		_lastSavedDate = new Date();
	  		_lastSavedDate.setTime(DateUtil.parseW3CDTF(deckXML.last_saved_date).getTime() - _serverTimeAheadOfLocalTimeByMilliseconds);	  		
			var numCards:int = deckXML.num_cards;
			_numCardsString = (numCards == 1) ? "1 card" : numCards + " cards";
			setTitle(deckXML.title);
			
			// create first side preview
			var side:Side = new Side();
			var side_xml_string:String = deckXML.cover_xml_string[0].toString();
			side = side.loadWithXML(new XML(side_xml_string));
			var uiSide:UISide = new UISide(side, 182);
			sidePreviewHBox.addChild(uiSide);
			
			// set modified date
			lastSavedDateLabel.text="Modified: " + friendlyDate(_lastSavedDate);
			
			this.percentWidth = 100;
		}
		
		private function setTitle(aTitle:String):void
		{
			_title = aTitle;
			titleLabel.text = _title;
		}
		
		public function resetTitleLabelLength():void
		{
			titleLabel.validateNow();
			var metrics:TextLineMetrics = titleLabel.getLineMetrics(0);
			var i:int =1;
			titleHBox.width = metrics.width + 4;
		}
					
		private function mouseOverListing(event:MouseEvent):void
		{
			if (!(event.target is Button))
			{
				currentState = "listing_highlight";				
			}
		}
		
		private function mouseOverTitle(event:MouseEvent):void
		{
			currentState = "title_highlight";			
			
			// prevent event from reaching DeckListing (this should not be treated as a mouse over DeckListing)
			event.stopPropagation();
		}
		
		private function mouseOutListing(event:MouseEvent):void
		{
			currentState = "";			
		}
		
		private function mouseOutTitle(event:MouseEvent):void
		{
			currentState = "listing_highlight";			
			//titleHBox.setStyle("backgroundColor", "#172322");			
		}
		
		
		private function mouseClickListing(event:MouseEvent):void
		{
			// as long as event is not on a button
			if (!(event.target is Button))
			{
				// fire event, passing back this deck ID
				var params:Object = new Object();
				params.userVisibleDeckID = _userVisibleID;
				params.title = _title;
		    	var newEvent:CustomEvent = new CustomEvent(DECK_LISTING_CLICKED, params, true);
		    	dispatchEvent(newEvent);
	  		}	  		
		}
		
		private function clickTitle(event:MouseEvent):void
		{
			// create a deck name dialog and add it to the screen
			var deckNameDialog:DeckNameDialog = new DeckNameDialog();
            PopUpManager.addPopUp(deckNameDialog, this, true);
       		deckNameDialog.setText(_title);
            PopUpManager.centerPopUp(deckNameDialog);
            
            // wait for the new deck name event to be fired when the pop up closes
            deckNameDialog.addEventListener(DeckNameDialog.NEW_DECK_NAME, newDeckName);
            
            // prevent event from reaching DeckListing (this should not be treated as a click on DeckListing)
			event.stopPropagation();
		}
		
		private function deleteButtonClicked():void
		{
			// create a confirm dialog and add it to the screen
			var confirmDialog:ConfirmDialog = new ConfirmDialog();
 	        PopUpManager.addPopUp(confirmDialog, this, true, PopUpManagerChildList.APPLICATION);
            PopUpManager.centerPopUp(confirmDialog);
            
            // wait for the new deck name event to be fired when the pop up closes
            confirmDialog.addEventListener(ConfirmDialog.BUTTON_CLICKED, initiateDeckDeletion);            
		}
		
		private function initiateDeckDeletion(e:CustomEvent):void
		{
			PopUpManager.removePopUp(e.target as IFlexDisplayObject);
			
			if (e.params.choice == "yes")
   			{
				// fire event, passing back this deck ID
				var params:Object = new Object();
				params.userVisibleDeckID = _userVisibleID;
		    	var newEvent:CustomEvent = new CustomEvent(DECK_DELETE_REQUESTED, params, true);
		    	dispatchEvent(newEvent);
		   }
		}
		
		private function duplicateButtonClicked():void
		{
			// fire event, passing back this deck ID
			var params:Object = new Object();
			params.userVisibleDeckID = _userVisibleID;
			params.title = _title;
	    	var newEvent:CustomEvent = new CustomEvent(DECK_DUPLICATION_REQUESTED, params, true);
	    	dispatchEvent(newEvent);			
		}
		
		private function newDeckName(e:CustomEvent):void
		{
			// remember new title - but don't adopt it yet
			_stagingTitle = e.params.title;
			
        	// prepare server request
			var request:XML = <deck/>;
			request['title'] = _stagingTitle;

			// update the server
			decksUpdate.send(request);
			
			// wait for the server to update, then continue with completeTitleChange() below
			
		}

		private function completeTitleChange(event:ResultEvent):void
        {
        	setTitle(_stagingTitle);
        }
		
		private function friendlyDate(date:Date):String
		{
			if (date)
			{
				var now:Date = new Date();
				var result:String;
	
				//var timeDifferenceInMinutes:int = Math.floor((now.getTime() - date.getTime()) / 60000);
	
				var dateDifferenceInMilliseconds:int = DateUtil.makeMorning(now).getTime() - DateUtil.makeMorning(date).getTime();			
				var dateDifferenceInDays:int = Math.floor(dateDifferenceInMilliseconds/86400000);
				
				switch (dateDifferenceInDays)
							{
								case 0: // today
									result = "Today";
									break;
								case 1: // yesterday
									result = "Yesterday";
									break;
								case 2: // one of the 5 days before yesterday
								case 3:
								case 4:
								case 5:
								case 6:
									result = DateUtil.getFullDayName(date);
									break;
								default: // more than 7 days ago, including today
									if (date.fullYear == now.fullYear) // if this year, then print day + month
									{
										result = date.date + " " + DateUtil.getFullMonthName(date);
									}
									else // if before this year, print full date
									{
										result = date.date + " " + DateUtil.getFullMonthName(date) + " " + date.fullYear;
									}
									break;
							}
				return result;
			}
			else
			{
				return "";
			}
		}
		
	]]>
</mx:Script>
	
</mx:HBox>
