<?xml version="1.0" encoding="utf-8"?>

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:me="com.shuffleduck.*"
				xmlns:me_view="com.shuffleduck.view.*"
				paddingLeft="10"
				paddingRight="10"
				paddingTop="0"
				paddingBottom="4"
				 backgroundAlpha="0.0">
  
<!-- Web Services -->
<mx:HTTPService id="deckDetailsShow" url="{ShuffleDuck.CONTEXT_URL}/decks/{userVisibleDeckID}/deck_details/{userVisibleDeckID}{serviceParameters}" resultFormat="e4x" result="deckDetailsShowResult(event)"/>
<mx:HTTPService id="deckDetailsUpdate" url="{ShuffleDuck.CONTEXT_URL}/decks/{userVisibleDeckID}/deck_details/{userVisibleDeckID}{serviceParameters}" method="POST" resultFormat="e4x" contentType="application/xml" result="completeSave(event)" headers="{putHeader}"/>
<mx:HTTPService id="deckDetailsUpdateAndExit" url="{ShuffleDuck.CONTEXT_URL}/decks/{userVisibleDeckID}/deck_details/{userVisibleDeckID}{serviceParameters}" method="POST" resultFormat="e4x" contentType="application/xml" result="saveConfirmedAndExitRequested(event)" headers="{putHeader}"/>
  
	<mx:Style source="com/shuffleduck/theme/styles.css"/>
  
	<mx:HBox backgroundColor="#000000" width="100%" height="55" horizontalGap="0" backgroundAlpha="0.0" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		
		<mx:Label text="ShuffleDuck" fontSize="40" fontWeight="bold" color="#FFFFFF" fontStyle="italic" id="logoLabel" toolTip="Return to Library" mouseOver="logoLabel.setStyle(&quot;color&quot;, &quot;#000000&quot;)" mouseOut="logoLabel.setStyle(&quot;color&quot;, &quot;#FFFFFF&quot;)" click="shuffleduckLogoClicked()"/>
		
		<mx:VBox height="100%" verticalGap="0" width="100%">
		
			<mx:HBox width="100%">
				<mx:Label text="{title}" color="#172322" id="deckNameLabel" fontSize="25" width="100%" height="36" textAlign="right"/>			
			</mx:HBox>
			
			<mx:HBox width="100%" horizontalGap="0">
			 	<mx:Spacer width="100%"/>
			 	<mx:Label text="Last Saved: " fontWeight="bold" color="#172322" fontSize="10"/>
			 	<mx:Label text="{_timeSinceSaveString}" color="#172322" fontSize="10" id="lastSavedLabel"/>
			 	<mx:Label text="[" fontWeight="bold" color="#172322" fontSize="10" textAlign="right" width="13"/>		    	
			 	<mx:Button label="save" styleName="StandardButton" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" height="17" textRollOverColor="0x25e9eb" alpha="0.0" click="saveDeckButtonClicked()" width="35"/>
			 	<mx:Label text="]" fontWeight="bold" color="#172322" fontSize="10" width="12" textAlign="left"/>
			</mx:HBox>

		</mx:VBox>
		
	</mx:HBox>
	<mx:HBox width="100%" height="100%">
			<me_view:DeckViewer id="deckViewer" width="100%" backgroundColor="#4C5C5E" cornerRadius="20" borderStyle="solid" borderThickness="5" height="100%" paddingBottom="0" borderColor="#FFFFFF"/>
			<me_view:PropertiesPane id="propertiesPane" cornerRadius="20" height="100%" backgroundColor="#4C5C5E" horizontalScrollPolicy="off"/>
	</mx:HBox>
  
  <mx:Script>
  	<![CDATA[
  		import com.shuffleduck.data.Deck;
  		import mx.events.FlexEvent;
  		import com.shuffleduck.view.CornerCircle;
  		import com.shuffleduck.view.UIUserComponent;
  		import mx.core.UIComponent;
  		import com.shuffleduck.data.TextBox;
  		import mx.core.IUIComponent;
  		import com.shuffleduck.data.Component;
  		import mx.containers.Canvas;
  		import mx.containers.Panel;
  		import com.shuffleduck.data.Side;
  		import com.shuffleduck.data.Card;
  		import com.shuffleduck.utils.CustomEvent;
  		import com.shuffleduck.view.UISide;
  		import com.shuffleduck.view.UITextBox;
  		import mx.managers.PopUpManager;
  		import com.shuffleduck.utils.DisplayListUtils;
  		import mx.core.UITextField;
		import mx.core.UITextFormat;
		import flash.text.TextFormatAlign;
		import flash.utils.getQualifiedClassName;
		import flash.utils.getTimer;
		import mx.managers.CursorManager;
		import flash.events.KeyboardEvent;
		import mx.managers.FocusManager;
		import mx.graphics.codec.PNGEncoder;
  		import mx.controls.Alert;
  		import mx.rpc.events.ResultEvent;
  		import mx.events.CloseEvent;
		import mx.controls.Alert;
		import com.adobe.utils.DateUtil;
		import mx.managers.PopUpManagerChildList;
		import com.shuffleduck.data.DataModelItem;
		import mx.core.IFlexDisplayObject;
		import com.shuffleduck.view.CardViewer;
		import com.shuffleduck.view.dialogs.SaveOrNotDialog;
		import com.shuffleduck.view.dialogs.SavingDialog;
		import com.shuffleduck.utils.WebServiceUtils;
		
  		 public static const ROLL_OVER_COLOR:uint = 0x25e9eb;
  		 
  		 public static const RETURN_TO_LIBRARY_REQUEST:String = "returnToLibraryRequest";
  		 
  		 // Application status reflects the current user action
  		 // Used to inform correct response to mouse and keyboard events
  		 private static const RESTORE_CURRENT_STATUS:uint = 0; // NOT A STATUS, used to request the restoration of defaults for whatever the curreent status is (i.e. one of the below)
  		 private static const STATUS_NONE:uint = 1; // no action in progress; user viewing
  		 private static const STATUS_COMPONENT_SELECTED:uint = 2; // a component is selected
  		 private static const STATUS_EDITING_PROPERTIES:uint = 3; // a component is selected and its properties are being edited
  		 															// currently not implemented - instead check for STATUS_COMPONENT_SELECTED and check the focus manager
  		 private static const STATUS_DROPPING_TEXTBOX:uint = 4; // new textbox has been clicked, but the textbox has not yet been placed
  		 private static const STATUS_DROPPING_IMAGE:uint = 5; // new image has been clicked, but the image has not yet been placed
  		 private static const STATUS_DRAGGING_CORNER:uint = 6; // the user is currently dragging the corner of a component
  		 
  		 // The header to send with the above put HTTPServices
  		 [Bindable] private var putHeader:Object = new Object();
  		 // The parameters to send on the end of HTTPService calls
  		 [Bindable] private var serviceParameters:String;
  		 
  		 private var _lastClickTime:uint = 0; // stores the last time the user clicked on _a component_ for double-click detection
  		 
  		 // selection handling (and highlighting)
  		 private var _currentSelectedUISide:UISide = null; // do not use except for selection handling
		 private var _currentSelectedComponent:UIUserComponent = null;
  		 
  		 // the last side that was clicked on (use this rather than _curentSelectedUISide, which is null when a component is not selected)
  		 private var _lastUISideClickedOn:UISide = null;
  		 private var _lastUISideClickedOnIsFromTemplate:Boolean;
  		 
  		 private var _status:uint = STATUS_NONE;
  		 private var _clipboard:Component = null;
  		 
  		 private var _setupCompleted:Boolean = false;
  		 
  		 [Bindable] private var userVisibleDeckID:uint; // the user visible deck id of the currently edited deck
  		 
  		 [Bindable] private var minutesSinceSave:uint;
  		 [Bindable] private var _timeSinceSaveString:String;
  		 private var saveTimer:Timer;
  		 
  		 [Bindable] private var title:String;
  		 
  		 private var _savingDialog:SavingDialog;
  		 private var _changedSinceSave:Boolean = false;
  		 
  		 [Embed(source="com/shuffleduck/assets/add_cursor.png")]
         [Bindable]
		 public var AddCursor:Class;      

  		 [Embed(source="com/shuffleduck/assets/stretch_cursor.png")]
         [Bindable]
		 public var StretchCursor:Class;      

  		 
  		/********************
  		 * Constructor
  		 ********************/
  		 
  		public function setup(aTitle:String):void
		{	
			deckViewer.showLoading();
			
			if (!(_setupCompleted)) // if this is the first time this function has been called
			{
				// set up the HTTP headers for the HTTPService components above
				putHeader["X-HTTP-METHOD-OVERRIDE"] = "put";

				// set up the deck viewer and saving dialog
				deckViewer.setup();
				_savingDialog = new SavingDialog();
								
				// listen for events
				// Events from DeckViewer
				this.addEventListener(DeckViewer.DECK_CLEARED, deckCleared);
				this.addEventListener(DeckViewer.CARD_DELETED, cardDeleted);
				this.addEventListener(DeckViewer.CARD_MOVED, cardMoved);
				this.addEventListener(DeckViewer.SCROLLED_TO_CARD_NUMBER, selectCardViewerByCardNumber);
	
				// Events from PropertiesPane
				this.addEventListener(PropertiesPane.COMPONENT_NAME_CHANGE, componentNameChange);
	
				// Events from NewComponentBar
				this.addEventListener(DeckViewer.NEW_TEXT_BOX_CLICKED, newTextBoxClicked);
				this.addEventListener(DeckViewer.NEW_IMAGE_CLICKED, newImageClicked);
	
				// Events from Components
				this.addEventListener(UIUserComponent.COMPONENT_CHANGED, componentChanged);
	
				// Mouse events
				this.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				this.addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				this.addEventListener(MouseEvent.MOUSE_OVER, mouseOver);
				this.addEventListener(MouseEvent.MOUSE_OUT, mouseOut);			
			
				// Keyboard events
				this.addEventListener(KeyboardEvent.KEY_DOWN,keyDownListener);
				
				_setupCompleted = true;
			}
			
			// some set up should be repeated when the user comes back to view a new deck
				// write the title to the screen
				title = aTitle;
				// clear the properties pane
				propertiesPane.currentState="off";
				// Instantiate the save timer
				saveTimer = new Timer(60000, 0); // fire timer event every minute forever
		        saveTimer.addEventListener("timer", updateTimeSinceSave);

			// TESTING SECTION - ALL BELOW CODE IS TEMPORARY
		}
  	    
  	    
  	    /**********************
  	    *   Internal Events
  	    ***********************/
  	    
  	    private function shuffleduckLogoClicked():void
  	    {
  	    	if (_changedSinceSave)
  	    	{
				// create a save or not dialog and add it to the screen
				var saveOrNotDialog:SaveOrNotDialog = new SaveOrNotDialog();
	 	        PopUpManager.addPopUp(saveOrNotDialog, this, true, PopUpManagerChildList.APPLICATION);
	            PopUpManager.centerPopUp(saveOrNotDialog);
	            
	            // wait for the new deck name event to be fired when the pop up closes
	            saveOrNotDialog.addEventListener(SaveOrNotDialog.SAVING_CHOICE, processUserExitChoice);            
  	    	}
  	    	else
  	    	{
  	    		exitToLibrary();
  	    	}
  	    }
  	    
		private function processUserExitChoice(e:CustomEvent):void
		{
			PopUpManager.removePopUp(e.target as IFlexDisplayObject);
			
			if (e.params.choice == "save") // if user wishes to save then exit
   			{
   				// save the deck (the saveDeck function will take care of exiting afterwards))
   				saveDeck(true);
		   }
		   else if (e.params.choice == "discard") // if user wishes to discard changes and exit
		   {
			   	_changedSinceSave = false;
		   		exitToLibrary();
		   }
		   else // user cancelled
		   {
		   	// do nothing
		   }
		}

  	    
  	    private function setStatus(status:uint):void
  	    {
  	    	switch(status)
  	    	{
  	    		case RESTORE_CURRENT_STATUS: // restore defaults for the current status - just recurse with the current status
  	    			setStatus(_status);
  	    			break;
  	    		case STATUS_NONE:
  	    			CursorManager.removeAllCursors();
  	    			_currentSelectedComponent = null;
		   			_status = status;
  	    			break;
				case STATUS_COMPONENT_SELECTED:
  	    			CursorManager.removeAllCursors();				
		   			_status = status;
  	    			break;				
				case STATUS_EDITING_PROPERTIES:
					CursorManager.removeAllCursors();
		   			_status = status;
				case STATUS_DROPPING_TEXTBOX:
		   			cursorManager.setCursor(AddCursor);
		   			_status = status;
		   			break;
				case STATUS_DROPPING_IMAGE:
		   			cursorManager.setCursor(AddCursor);
		   			_status = status;
		   			break;				
				case STATUS_DRAGGING_CORNER:
		   			cursorManager.setCursor(StretchCursor);
		   			_status = status;
		   			break;									
  	    	}
  	    }
  	    
  	    /**
  	    * 	From: 		[this]
  	    *	Trigger:	User clicked the Save Deck button
  	    */
  	    private function saveDeckButtonClicked():void
  	    {
  	    	// save the deck
			saveDeck();
  	    }
        
        public function loadDeck(requestedUserVisibleDeckID:int):void
        {
        	// Retrieve deck from server
        	userVisibleDeckID = requestedUserVisibleDeckID;
        	serviceParameters = WebServiceUtils.buildRequestParamameters();
        	deckDetailsShow.send();

			// reset the save timer
			resetSaveTimer();        
        }
        
        // Process the returned deck XML string as part of deck loading
        private function deckDetailsShowResult(event:ResultEvent):void
		{
			var rails_xml_string:XML = event.result as XML;
			var deck_details_xml_string:XML = rails_xml_string.xml_string[0];
			 // load the deck
			var currentlyShownDeck:Deck = deckViewer.showDeck(deck_details_xml_string);
			currentlyShownDeck.addEventListener(DataModelItem.DATA_MODEL_CHANGE, recallDeckChanged);
  		}

		private function recallDeckChanged(event:CustomEvent):void
		{
			_changedSinceSave = true;
		}


  	    /**********************
  	    *   External Events
  	    ***********************/
  	    
  	    /**
  	    * 	From: 		KeyboardEvent
  	    *	Trigger:	User pressed a key on the keyboard
  	    */
  	    private function keyDownListener(e:KeyboardEvent):void
  	    {
			if (e.altKey) // if user has depressed alt key
			{
				if (e.keyCode == 37)  // left arrow
				{
					deckViewer.scrollLeft();
				}
				if (e.keyCode == 39)  // right arrow
				{
					deckViewer.scrollRight();
				}
			}
			else if (e.ctrlKey) // if user has depressed the control key
			{
				if (e.keyCode == 3) // C - copy
				{
					if (_status == STATUS_COMPONENT_SELECTED)
					{
						// clone the selected component to the clipboard (so that we still have the clone even if the user deletes the original before pasting)
						_clipboard = _currentSelectedComponent.component.clone();						
					}
				}
				else if (e.keyCode == 24) // X - cut
				{
					if (_status == STATUS_COMPONENT_SELECTED)
					{
						// clone the selected component to the clipboard (so that we still have the clone even if the user deletes the original before pasting)
						_clipboard = _currentSelectedComponent.component.clone();				
						// delete the selected component
						deleteCurrentComponent();
					}
				}
				else if (e.keyCode == 22) // V - paste
				{
					// if the clipboard is full (and by implication a side has been clicked on for pasting)
					if (_clipboard != null)
					{
							// clone the component in the clipboard (necessary so that we can paste from the clipboard multiple times)
								var pastedComponent:Component = _clipboard.clone();
								// if in template mode, assign it a new template componentID
								if (_lastUISideClickedOnIsFromTemplate)
								{
									pastedComponent.assignNewTemplateComponentID();
								}
								else // otherwise set the templateComponentID to -1 
								{
									pastedComponent.detachFromTemplate();
								}
	
							// add the pasted component to the last side clicked on
								var uiUserComponent:UIUserComponent = _lastUISideClickedOn.addCopiedComponent(pastedComponent);
							
							// select the pasted component automatically
								selectUIUserComponent(uiUserComponent);
					}
						
				}	
				else if (e.keyCode == 19) // S - save
				{
					// trace(e.keyCode);
					// save the deck
					saveDeck();
				}	
			}
			else // key pressed without depressing the alt or control key
			{
				if (e.keyCode == 8) // delete key
				{
					if (_status == STATUS_COMPONENT_SELECTED)
					{						if (this.focusManager.getFocus() == null) // not editing attributes
						{
							deleteCurrentComponent();
						}
						else // if editing an attribute, does the editing of that attribute require use of the delete key?
						{
							var focusComponent:UIComponent = this.focusManager.getFocus() as UIComponent;
							if (	(focusComponent.name == "backgroundColorPicker")
									|| (focusComponent.name == "foregroundColorPicker")
									|| (focusComponent.name == "alignmentComboBox")
								)
								{
									deleteCurrentComponent();
								}
						}				
					}
				}
			}
        }
  	    
  	    
  	    /**
  	    * 	From: 		propertiesPane
  	    *	Trigger:	User changed a template component name
  	    */
    	private function componentNameChange(e:CustomEvent):void
   		{
   			deckViewer.deck.setTemplateComponentName(e.params.component, e.params.newName);
        }

  	    
  	    /**
  	    * 	From: 		newComponentBar
  	    *	Trigger:	User clicked on the new TextBox button
  	    */
    	private function newTextBoxClicked(e:CustomEvent):void
   		{
   			setStatus(STATUS_DROPPING_TEXTBOX);
        }
        
  	    /**
  	    * 	From: 		newComponentBar
  	    *	Trigger:	User clicked on the new Image button
  	    */
    	private function newImageClicked(e:CustomEvent):void
   		{
   			setStatus(STATUS_DROPPING_IMAGE);
        }
        
        /**
  	    * 	From: 		UIUserComponent
  	    *	Trigger:	User dragged or resized a component
  	    */
    	private function componentChanged(e:CustomEvent):void
   		{
    		// update the properties pane with the new information
			propertiesPane.setContext(e.params.component as Component, e.params.uiUserComponent as UIUserComponent, deckViewer.areCurrentSidesFromTemplate());
        }
        
        /**
  	    * 	From: 		MouseEvent
  	    *	Trigger:	Mouse moved over something
  	    */   
        private function mouseOver(e:Event):void
		{
			if ((e.target) is CornerCircle)
			{
				// no change of status - just show user that they can enter STATUS_DRAGGING_CORNER if they wish
				CursorManager.setCursor(StretchCursor);
			}
		}
		
        /**
  	    * 	From: 		MouseEvent
  	    *	Trigger:	Mouse moved over something
  	    */   
        private function mouseOut(e:Event):void
		{
			if ((e.target) is CornerCircle)
			{
				// restore cursor default
				setStatus(RESTORE_CURRENT_STATUS);
			}
		}
        
        
        /**
  	    * 	From: 		MouseEvent
  	    *	Trigger:	User double clicked somewhere
  	    */   
        private function mouseDoubleClicked(e:Event):void
		{
			// only interested in double clicks on TextBoxes - these should allow the user to edit the associated text
			if ((e.target) is com.shuffleduck.view.UITextBox)
			{
				var uiTextBox:UITextBox = e.target as UITextBox;
				
				// log the status change
				_status = STATUS_EDITING_PROPERTIES;
			}
		}
		
		/**
  	    * 	From: 		MouseEvent
  	    *	Trigger:	User pressed mouse button down somewhere
  	    */   
		private function mouseDown(e:Event):void
		{
			var uiUserComponent:UIUserComponent;
			
				if (_status == STATUS_DROPPING_TEXTBOX)
				{
					// if the cursor is over a side, then drop a text box at the current location
					if ((e.target is UISide) || (e.target is UIUserComponent)) // you can drop textboxes on top of existing components
					{
						// first find the side that was clicked on...
						var uiSideToDropOn:UISide;
						if (e.target is UISide)
						{
							uiSideToDropOn = e.target as UISide;
						}
						else // target is a component on the side
						{
							uiSideToDropOn = e.target.parent as UISide;
						}
						
						// .... then add the text box to the side
						uiUserComponent = uiSideToDropOn.addTextBoxAtCursorLocation(deckViewer.areCurrentSidesFromTemplate());
						
						// select the new TextBox automatically
						selectUIUserComponent(uiUserComponent);
					}
					
					// reset the cursor to the default, and leave _droppingTextBox mode (regardless of whether a textbox was placed)
					setStatus(STATUS_COMPONENT_SELECTED);
				}
				// if user clicked on a resizing corner
				else if (e.target is CornerCircle)
				{
					// handle corner dragging
					uiUserComponent = e.target.parent.parent;
					uiUserComponent.dragCorner(e.target as CornerCircle, this.stage);
					setStatus(STATUS_DRAGGING_CORNER);
				}
				// if user clicked on a component
				else if (e.target is UIUserComponent)
				{
					
					// check for double click
					// (this is necessary because a single click on a component causes a redraw of the component for selection
					//  purposes; flash therefore fails to pick up on component double clicks - the second click is on a
					//  seperate instance of UIComponent)
					var currentTime:uint = getTimer();
					if (currentTime - _lastClickTime < 250) // pretty naive condition - could be improved by adding some co-ordinates if there proves a need
															// THIS FUNCTIONALITY COULD BE REMOVED AND REPLACED WITH A DOUBLE CLICK EVENT
															// IT EXISTED BECAUSE UICOMPONENTS USED TO BE IMMUTABLE AND WOULD BE REPLACED AFTER CERTAIN CLICKS
															// UICOMPONENTS ARE NOW UPDATED RATHER THAN REPLACED WITH CLICKS, AND DOUBLE CLICK EVENTS THEREFORE WORK
					{
						// handle double click
						mouseDoubleClicked(e);
					}
					else // handle mouse down on component
					{
						// select component clicked on and show it in the properties pane
							uiUserComponent = e.target as UIUserComponent;
							selectUIUserComponent(uiUserComponent);
												
						// Drag handling
							// start drag handler on uiUserComponent (this must be done before redrawing the component)
							uiUserComponent.drag(this.stage);
							
						// Double click detection
				        	// store click for future detection of double clicks
				        	_lastClickTime = getTimer();
		   			}       	
				}
				// if user clicked on either a side or a card
				else if ((e.target is UISide)||(e.target is CardViewer))
				{
					// get the card viewer clicked on
					var cardViewer:CardViewer;
					if (e.target is UISide)
						cardViewer = (e.target as UISide).parent.parent as CardViewer;
					else
						cardViewer = (e.target as CardViewer);
						
					// select the card clicked on
					selectCardViewer(cardViewer);
				}
				// when the user clicks in certain areas, the selected component should be forgotten
				else if (	// user clicked on the deckViewer (or a descendant) but not the scrollbar portion
				    		(    (e.target.toString().indexOf(".deckViewer") != -1)				// click is within the deck viewer
				    		  && (e.target.toString().indexOf(".horizontalScrollBar") == -1)		// ... but not on a scroll bar
				    		  && (e.target.toString().indexOf(".verticalScrollBar") == -1)
				    		  && !(e.target is CornerCircle)									// ... and not on a resize corner
				    		)
				    		||
				    		(    (e.target.toString().indexOf(".newComponentBar") != -1)				// click is within the NewComponentBar
				    		)
				    	)
				{
					// if a component is selected, forget it
					if (Component.selectionExists()||CardViewer.selectionExists())
					{
						dropSelection();
					}
				}
				
			// in addition to any other processing, remember the side clicked on, if a side was clicked on
				var uiSideJustClickedOn:UISide = DisplayListUtils.getFirstAncestorOfType(e.target as DisplayObject, "com.shuffleduck.view.UISide") as UISide;
				if (uiSideJustClickedOn != null) // if a UISide was clicked on (directly or indirectly)
				{
					_lastUISideClickedOn = uiSideJustClickedOn;
					_lastUISideClickedOnIsFromTemplate = deckViewer.areCurrentSidesFromTemplate();
				}
		}

		private function dropSelection():void
		{
			// turn the properties pane off
			propertiesPane.clearContext();
			
			// clear any current selection
			clearSelection();
			
	        // redraw the components on the side containing the selection, to reflect that selection
	       	//_currentSelectedUISide.redrawExistingComponents();
	       	//_currentSelectedUISide = null;
	       	
	       	// set the status
	       	setStatus(STATUS_NONE);
		}

		private function mouseUp(e:Event):void
		{
			if (_status == STATUS_DRAGGING_CORNER)
			{
				setStatus(STATUS_COMPONENT_SELECTED);
			}
		}

		/**
  	    * 	Purpose: 	Selects a given UIUserComponent
  	    */    

		private function selectUIUserComponent(uiUserComponent:UIUserComponent):void
		{
			// Selection handling
			
				// clear existing selection
				clearSelection();
				
				// Retrieve the UISide and Component that the user clicked on
				var uiSide:UISide = uiUserComponent.parent as UISide;
				var component:Component = uiSide.getComponentRepresentedBy(uiUserComponent);
				
				// store the UISide reference for future selection handling						
				_currentSelectedUISide = uiSide;
				_currentSelectedComponent = uiUserComponent;
				
				// set status
				setStatus(STATUS_COMPONENT_SELECTED);

				// set the component object to be selected
				component.setSelected();
	            // redraw the components on the side containing the selection, to reflect that selection
	        	uiSide.redrawExistingComponents();

			// Properties Pane setup
				        	
	            // set properties pane to point to the selected component
    			propertiesPane.setContext(component as Component, uiUserComponent, deckViewer.areCurrentSidesFromTemplate());
	        					        	
	        	// set the focus to the selected component
				uiUserComponent.setFocus();
		}

		/**
  	    * 	Purpose: 	Selects a given CardViewer
  	    */    

		private function selectCardViewer(cardViewer:CardViewer):void
		{
			// Selection handling
			clearSelection();
	
			cardViewer.setSelected(true);
	
			// set status
			setStatus(STATUS_NONE); // treat card selection the same as no selection

			// Properties Pane setup
	            // set properties pane to point to the selected card
    			propertiesPane.setCardContext(cardViewer, deckViewer.areCurrentSidesFromTemplate());      	
		}
		
		private function selectCardViewerByCardNumber(event:CustomEvent):void
		{
			selectCardViewer(deckViewer.getCardViewerNumber(event.params.newCardNumber));
		}
		
		private function clearSelection():void
		{
			// clear existing selection
			Component.clearSelection(); // only one selected component permitted (may change later)
			CardViewer.clearSelection();
			// redraw the components on the side previously selected (if there is such a side)
			if (_currentSelectedUISide != null)
			{
				_currentSelectedUISide.redrawExistingComponents();
				_currentSelectedUISide = null;
			}
		}


  	    /**
  	    * 	From: 		deckViewer
  	    *	Trigger:	Existing deck was deleted
  	    */    
        private function deckCleared(e:CustomEvent):void
        {
        	// reset application to default (no deck) state
        	propertiesPane.currentState = "off";
        }          
          
        /**
  	    * 	From: 		DeckViewer
  	    *	Trigger:	User deleted a card
  	    */
        private function cardDeleted(e:CustomEvent):void
        {
        	// clear properties pane
        	propertiesPane.currentState = "off";
        } 
          
        /**
  	    * 	From: 		DeckViewer
  	    *	Trigger:	User moved a card
  	    */
        private function cardMoved(e:CustomEvent):void
        {
        	// clear properties pane
        	propertiesPane.currentState = "off";
        } 

        /**
  	    * 	From: 		EditPane
  	    *	Trigger:	User added a new component to the edited side
  	    */
  	    // COMMENTED OUT AS BELIEVE IS NO LONGER USED - REMOVE AFTER TESTING
/*        private function componentAdded(e:CustomEvent):void
        {
        	// redraw all deck-specific content
        	//redrawSides();
        }*/
        
        /**********************
  	    *   Internal Functions
  	    ***********************/
  	    
        private function redrawSides(cardNumber:uint):void
        {
        	deckViewer.redrawCard(cardNumber);
        }
        
        private function redrawAllCards():void
        {
        	deckViewer.redrawAllCards();
        }
        
        private function deleteCurrentComponent():void
        {
        	_lastUISideClickedOn.deleteComponent(_currentSelectedComponent);
        	propertiesPane.currentState = "off";
        }
        
        /**
  	    *	Purpose:	Saves a deck to the server and blocks all user interaction until success is achieved
  	    */
        private function saveDeck(exitAfterwards:Boolean = false):void
        {
        	// show Saving Dialog to prevent any user interaction
            PopUpManager.addPopUp(_savingDialog, this, true, PopUpManagerChildList.APPLICATION);
            PopUpManager.centerPopUp(_savingDialog);

        	// prepare XML string representation of deck
        	var xmlString:String = deckViewer.deck.toXMLString();
        	
			// reformat XMLString - uncomment the below 2 lines to aid with debugging the XML string
			// var deckXML:XML = new XML(xmlString);
  	    	// xmlString = deckXML.toXMLString();

        	// prepare server request
			var deck_detail:XML = <deck_detail/>;
			deck_detail['xml_string'] = xmlString;
			
			// send server request
			if (exitAfterwards)
			{
				serviceParameters = WebServiceUtils.buildRequestParamameters(deck_detail);
				deckDetailsUpdateAndExit.send(deck_detail);
			}
			else
			{
				serviceParameters = WebServiceUtils.buildRequestParamameters(deck_detail);
				deckDetailsUpdate.send(deck_detail);
			}
        }
        
        private function saveConfirmedAndExitRequested(event:ResultEvent):void
        {
 			completeSave(event);
  	    	exitToLibrary();
        }

        private function completeSave(event:ResultEvent):void
        {
        	// reset the save timer
			resetSaveTimer();			
  	    	
  	    	// remove Saving modal pop-up
  	    	PopUpManager.removePopUp(_savingDialog);	    	
        }
        
        private function resetSaveTimer():void
        {
			// start counting time since last save from zero
			minutesSinceSave = 0;
			saveTimer.reset();
			saveTimer.start();
			refreshTimeSinceSaveString();
			
			// recall that current state is the saved state
			_changedSinceSave = false;
        }
        
        public function updateTimeSinceSave(event:TimerEvent):void
        {
        	minutesSinceSave++;
			refreshTimeSinceSaveString();        	
        }
        
        private function refreshTimeSinceSaveString():void
        {
  	    	switch(minutesSinceSave)
  	    	{
  	    		case 0:
  	    			_timeSinceSaveString = "seconds ago";
  	    			break;
  	    		case 1:
  	    			_timeSinceSaveString = "1 minute ago";
  	    			break;
  	    		default:
  	    			_timeSinceSaveString = minutesSinceSave + " minutes ago";
  	    	}
        }
        
        private function exitToLibrary():void
        {
        	// clear the current deck
        	deckViewer.clear();
        	
        	// raise event so that application may change state back to the library
			var params:Object = new Object();
	    	var newEvent:CustomEvent = new CustomEvent(RETURN_TO_LIBRARY_REQUEST, params, true);
	    	dispatchEvent(newEvent);
        }
        
        public function get changedSinceSave():Boolean
        {
        	return _changedSinceSave;
        }


  	]]>
  </mx:Script>
  
</mx:VBox>