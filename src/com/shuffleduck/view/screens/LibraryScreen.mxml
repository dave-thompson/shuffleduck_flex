<?xml version="1.0" encoding="utf-8"?>

<mx:VBox	    xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:me="com.shuffleduck.*"
				xmlns:me_view="com.shuffleduck.view.*"
				xmlns:sp="com.shuffleduck.view.spinner.*"
				paddingLeft="10"
				paddingRight="10"
				paddingTop="0"
				paddingBottom="4"
				width="100%"
				height="100%"
				backgroundAlpha="0.0"
				creationComplete="setup()">
	<mx:states>
		<mx:State name="loading">
			<mx:RemoveChild target="{hbox1}"/>
			<mx:RemoveChild target="{deckListingsVBox}"/>
			<mx:AddChild relativeTo="{decksVBox}" position="lastChild">
				<sp:Spinner id="spinner" toolTip="Loading your cards" tickColor="#86C9EF" size = "55" numTicks = "12" tickWidth = "6" speed = "1000" fadeSpeed = "400"/>
			</mx:AddChild>
			<mx:SetStyle target="{decksVBox}" name="horizontalAlign" value="center"/>
			<mx:SetStyle target="{decksVBox}" name="verticalAlign" value="middle"/>
		</mx:State>
	</mx:states>
			
<!-- Web Services -->
<mx:HTTPService id="decksIndex" url="{ShuffleDuck.CONTEXT_URL}/decks{serviceParameters}" resultFormat="e4x" result="decksIndexResult(event)"/>
<mx:HTTPService id="deckDetailsShowForDuplication" url="{ShuffleDuck.CONTEXT_URL}/decks/{userVisibleDeckIDForDuplication}/deck_details/{userVisibleDeckIDForDuplication}{serviceParameters}" resultFormat="e4x" result="deckDetailsShowForDuplicationResult(event)"/>
<mx:HTTPService id="decksCreate" url="{ShuffleDuck.CONTEXT_URL}/decks{serviceParameters}" method = "POST" resultFormat="e4x" contentType="application/xml" result="requestDecksIndex()"/>
<mx:HTTPService id="decksDelete" url="{ShuffleDuck.CONTEXT_URL}/decks/{userVisibleDeckIDForDeletion}{serviceParameters}" method="POST" resultFormat="e4x" contentType="application/xml" result="decksDeleteResult(event)" headers="{deleteHeader}">
	<mx:request>
	   <flex>true</flex>
	</mx:request>
</mx:HTTPService>
<mx:HTTPService id="sessionDelete" url="{ShuffleDuck.CONTEXT_URL}/user_session{serviceParameters}" method="POST" resultFormat="e4x" contentType="application/xml" result="loggedOut()" headers="{deleteHeader}">
	<mx:request>
	   <flex>true</flex>
	</mx:request>
</mx:HTTPService>

						
<!-- UI -->
			
  <mx:HBox id="topHBox" width="100%" height="55" horizontalGap="0" backgroundColor="#86C9EF" backgroundAlpha="0.0">
    <mx:Label text="ShuffleDuck" fontSize="40" fontWeight="bold" color="#ffffff" fontStyle="italic"/>
    <mx:Spacer width="100%"/>
    <mx:Label text="" height="16" color="#000000" id="usernameLabel" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" width="329" textAlign="right"/>
    <mx:Label text="[" height="16" color="#000000" id="usernameLabel1" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" width="8"/>
    <mx:Button label="logout" click="logoutButtonClicked()" height="16" width="41" alpha="0.0" fillAlphas="[0.0, 0.0, 0.0, 0.0]" textRollOverColor="0x25e9eb" styleName="StandardButton" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" id="logoutButton"/>
    <mx:Label text="]" height="16" color="#000000" id="usernameLabel0" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" width="8"/>
  </mx:HBox>
  <mx:HBox id="mainHBox" width="100%" height="100%">	
    <mx:VBox id="decksVBox" width="100%" height="100%" borderStyle="solid" backgroundColor="#4C5C5E" paddingBottom="10" paddingLeft="20" paddingTop="15" cornerRadius="20" borderThickness="5" paddingRight="20" borderColor="#FFFFFF">
      <mx:HBox width="100%" id="hbox1">
        <mx:Label text="Library" fontSize="22" fontWeight="bold" color="#FFFFFF" fontStyle="italic"/>
        <mx:Spacer width="100%"/>
        <mx:Button label="+ New Deck" click="newDeckButtonClicked()" id="newDeckButton" styleName="SlimlineButton" height="33" width="86" textRollOverColor="0x25e9eb"/>
      </mx:HBox>
      <mx:VBox width="100%" id="deckListingsVBox" minHeight="0" minWidth="0" verticalScrollBarStyleName="customScroll" height="100%" resize="resizeDeckListingsVBox()" horizontalScrollPolicy="off" verticalGap="15" paddingRight="10">
      </mx:VBox>
    </mx:VBox>
  </mx:HBox>
	
	
				
  <mx:Script>
  	<![CDATA[
  		import mx.events.FlexEvent;

		import com.shuffleduck.utils.CustomEvent;
		import com.adobe.utils.DateUtil;
		import mx.rpc.events.ResultEvent;
		import com.shuffleduck.view.DeckListing;
		import com.shuffleduck.utils.WebServiceUtils;

		// event constants
		public static const FEEDBACK_BUTTON_CLICKED:String = "feedbackButtonClicked";
		
  		// The header to send with the above delete HTTPServices
  		[Bindable] private var deleteHeader:Object = new Object();
		 
		[Bindable] private var userVisibleDeckIDForDeletion:int;
		[Bindable] private var userVisibleDeckIDForDuplication:int;
		[Bindable] private var serviceParameters:String;
		private var titleOfDeckToBeDuplicated:String;
		
  		/********************
  		 * Constructor
  		 ********************/
  		 
  		public function setup():void
		{							
			// build HTTPService headers
			deleteHeader["X-HTTP-METHOD-OVERRIDE"] = "delete";

			// retrieve user's decks from server
			setLoading(true);
			serviceParameters = WebServiceUtils.buildRequestParameters();
			decksIndex.send();

			 // Set up event listeners
		     this.addEventListener(DeckListing.DECK_DELETE_REQUESTED, deleteDeck);
		     this.addEventListener(DeckListing.DECK_DUPLICATION_REQUESTED, duplicateDeck);
		}
		
		
		public function setUsername(aUsername:String):void
		{
			// write username to screen
			usernameLabel.text = aUsername;
		}
		
		private function logoutButtonClicked():void
		{
			serviceParameters = WebServiceUtils.buildRequestParameters();
			sessionDelete.send();
		}
		
		private function loggedOut():void
  	    {
  	    	// flush out all data
  	    	userVisibleDeckIDForDeletion = 0;
			userVisibleDeckIDForDuplication = 0;
			titleOfDeckToBeDuplicated = "";
			deckListingsVBox.removeAllChildren();
			usernameLabel.text = "";


  	    	// raise an event to the application so it can switch back to the login screen
  	    	var params:Object = new Object();
	    	var event:CustomEvent = new CustomEvent(ShuffleDuck.USER_LOGGED_OUT, params, true);
	    	dispatchEvent(event);
  	    }

		
		private function newDeckButtonClicked():void
		{			
			// retrieve default deck XML string from file and wait for loader to finish
			var loader:URLLoader = new URLLoader();
        	loader.dataFormat = URLLoaderDataFormat.TEXT;
        	loader.addEventListener(Event.COMPLETE, handleTemplateLoadComplete);
        	loader.load(new URLRequest("DefaultTemplate.xml"));
		}
		
		private function handleTemplateLoadComplete(event:Event):void
		{
			// read XML string
			var loader:URLLoader = URLLoader(event.target);
			var xmlString:String = loader.data;
			
			// set up new deck details for passing to server
			var deck:XML = <deck/>;
			deck['title'] = "New Deck";
			deck['xml_string'] = xmlString;
			deck['last_saved_date'] = DateUtil.toW3CDTF(new Date());
			
			// send new deck details to server for new deck creation
			serviceParameters = WebServiceUtils.buildRequestParameters(deck);
			decksCreate.send(deck);
		}

		private function deleteDeck(e:CustomEvent):void
		{
			// delete deck from server
			userVisibleDeckIDForDeletion = e.params.userVisibleDeckID;
			serviceParameters = WebServiceUtils.buildRequestParameters();
			decksDelete.send();
			
			// wait for the response before removing deck from the UI
		}
		
		
		private function decksDeleteResult(event:ResultEvent):void
		{
			// refresh the deck list
			serviceParameters = WebServiceUtils.buildRequestParameters();
			decksIndex.send();
		}


		private function duplicateDeck(e:CustomEvent):void
		{
			// log the deck title
			titleOfDeckToBeDuplicated = e.params.title;

			// retrieve the deck for duplication from the server
			userVisibleDeckIDForDuplication = e.params.userVisibleDeckID;
			serviceParameters = WebServiceUtils.buildRequestParameters();
			deckDetailsShowForDuplication.send();
			
			// wait for the response, then duplicate the deck
		}
		
		private function deckDetailsShowForDuplicationResult(event:ResultEvent):void
		{
			// Deck xml_string has just been returned from the server
			// Create a new deck, using this xml_string
			
			// copy required data from HTTP response into local variables
			var server_response:XML = event.result as XML;
			var deck_xml_string:String = server_response.xml_string[0].toString();
			var title:String = titleOfDeckToBeDuplicated;
			
			// adjust title to reflect that this is a copy
			title = "(Copy of) " + title;
						
			// Send request to server for new deck to be made using these parameters
			var create_deck_request:XML = <deck/>;
			create_deck_request['title'] = title;
			create_deck_request['xml_string'] = deck_xml_string;
			create_deck_request['last_saved_date'] = DateUtil.toW3CDTF(new Date());
			
			// send new deck details to server for new deck creation
			serviceParameters = WebServiceUtils.buildRequestParameters(create_deck_request);
			decksCreate.send(create_deck_request);
		}
		
		private function requestDecksIndex():void
		{
			serviceParameters = WebServiceUtils.buildRequestParameters();
			decksIndex.send();		
		}
		
		private function decksIndexResult(event:ResultEvent):void
		{
			var decks:XML = event.result as XML;
			var serverTime:Date = DateUtil.parseW3CDTF(decks.timestamp);
			
			// clear deck listing
			setLoading(false);
			deckListingsVBox.removeAllChildren();
						
			// loop through XML string, creating deck listings and adding them to the screen
			var deckListing:DeckListing;
			for each (var deck:XML in decks.deck)
			{
				// create deck listing
				deckListing = new DeckListing();
				deckListingsVBox.addChild(deckListing);
				deckListing.setup(deck, serverTime);
			}
  		}
  		
  		private function resizeDeckListingsVBox():void
  		{
  			// warn each deck listing so that it can resize its title labels if necessary
  			for each (var listing:DeckListing in deckListingsVBox.getChildren())
  			{
  				listing.resetTitleLabelLength();
  			}
  		}

		private function setLoading(loading:Boolean):void
		{
			if (loading)
			{
				currentState = "loading";
				if (spinner) spinner.play(); // if the spinner has been created, play it; if not, allow it to autoplay as soon as creation completes
			}
			else
			{
				currentState = "";
				spinner.stop();
			}
		}

  	]]>
  </mx:Script>

  
</mx:VBox>